{
  "api/DFeSigner.Core.Exceptions.DFeSignerException.html": {
    "href": "api/DFeSigner.Core.Exceptions.DFeSignerException.html",
    "title": "Class DFeSignerException | DFeSigner.NET",
    "summary": "Class DFeSignerException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção base para erros relacionados à assinatura de documentos fiscais eletrônicos. public class DFeSignerException : Exception, ISerializable Inheritance object Exception DFeSignerException Implements ISerializable Derived InvalidCertificateException InvalidXmlFormatException MissingReferenceIdException MissingSignatureElementException MissingXmlElementException UnexpectedDocumentTypeException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DFeSignerException(string) public DFeSignerException(string message) Parameters message string"
  },
  "api/DFeSigner.Core.Exceptions.InvalidCertificateException.html": {
    "href": "api/DFeSigner.Core.Exceptions.InvalidCertificateException.html",
    "title": "Class InvalidCertificateException | DFeSigner.NET",
    "summary": "Class InvalidCertificateException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando um certificado digital inválido ou sem chave privada é utilizado. public class InvalidCertificateException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException InvalidCertificateException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidCertificateException() public InvalidCertificateException()"
  },
  "api/DFeSigner.Core.Exceptions.InvalidXmlFormatException.html": {
    "href": "api/DFeSigner.Core.Exceptions.InvalidXmlFormatException.html",
    "title": "Class InvalidXmlFormatException | DFeSigner.NET",
    "summary": "Class InvalidXmlFormatException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando o XML fornecido não possui o elemento raiz esperado para a assinatura digital. public class InvalidXmlFormatException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException InvalidXmlFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidXmlFormatException() public InvalidXmlFormatException() InvalidXmlFormatException(string) Inicializa uma nova instância da classe InvalidXmlFormatException com uma mensagem de erro especificada e o nome da tag raiz esperada. public InvalidXmlFormatException(string expectedRootTag) Parameters expectedRootTag string O nome da tag raiz esperada para a assinatura digital (ex: \"infNFe\", \"infCTe\", \"infMDFe\"). Properties ExpectedRootTag Obtém o nome do elemento XML raiz que era esperado para a assinatura. public string ExpectedRootTag { get; } Property Value string"
  },
  "api/DFeSigner.Core.Exceptions.MissingReferenceIdException.html": {
    "href": "api/DFeSigner.Core.Exceptions.MissingReferenceIdException.html",
    "title": "Class MissingReferenceIdException | DFeSigner.NET",
    "summary": "Class MissingReferenceIdException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando o XML fornecido não contém o atributo 'Id' (referenceId) necessário para a assinatura digital no elemento raiz do documento fiscal eletrônico. public class MissingReferenceIdException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException MissingReferenceIdException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingReferenceIdException(string) Inicializa uma nova instância da classe MissingReferenceIdException com o nome do elemento XML onde o atributo 'Id' era esperado. public MissingReferenceIdException(string elementName) Parameters elementName string O nome do elemento XML (ex: \"infNFe\", \"infCTe\", \"infMDFe\"). Properties AttributeName Obtém o nome do atributo de referência que estava faltando (geralmente \"Id\"). public string AttributeName { get; } Property Value string ElementName Obtém o nome do elemento XML onde o atributo 'Id' era esperado (ex: \"infNFe\", \"infCTe\", \"infMDFe\"). public string ElementName { get; } Property Value string"
  },
  "api/DFeSigner.Core.Exceptions.MissingSignatureElementException.html": {
    "href": "api/DFeSigner.Core.Exceptions.MissingSignatureElementException.html",
    "title": "Class MissingSignatureElementException | DFeSigner.NET",
    "summary": "Class MissingSignatureElementException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando um XML não contém a tag Signature. public class MissingSignatureElementException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException MissingSignatureElementException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingSignatureElementException() public MissingSignatureElementException()"
  },
  "api/DFeSigner.Core.Exceptions.MissingXmlElementException.html": {
    "href": "api/DFeSigner.Core.Exceptions.MissingXmlElementException.html",
    "title": "Class MissingXmlElementException | DFeSigner.NET",
    "summary": "Class MissingXmlElementException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando um elemento XML crítico para a assinatura não é encontrado. public class MissingXmlElementException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException MissingXmlElementException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingXmlElementException(string, string) public MissingXmlElementException(string elementName, string parentElement) Parameters elementName string parentElement string Properties ElementName public string ElementName { get; } Property Value string ParentElement public string ParentElement { get; } Property Value string"
  },
  "api/DFeSigner.Core.Exceptions.UnexpectedDocumentTypeException.html": {
    "href": "api/DFeSigner.Core.Exceptions.UnexpectedDocumentTypeException.html",
    "title": "Class UnexpectedDocumentTypeException | DFeSigner.NET",
    "summary": "Class UnexpectedDocumentTypeException Namespace DFeSigner.Core.Exceptions Assembly DFeSigner.Core.dll Exceção para quando o XML é válido, mas não é do tipo de documento fiscal esperado (ex: NF-e passada para assinador de MDF-e). public class UnexpectedDocumentTypeException : DFeSignerException, ISerializable Inheritance object Exception DFeSignerException UnexpectedDocumentTypeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnexpectedDocumentTypeException(string, string) public UnexpectedDocumentTypeException(string expectedModel, string foundModel) Parameters expectedModel string foundModel string Properties ExcepctedModel public string ExcepctedModel { get; } Property Value string FoundModel public string FoundModel { get; } Property Value string"
  },
  "api/DFeSigner.Core.Exceptions.html": {
    "href": "api/DFeSigner.Core.Exceptions.html",
    "title": "Namespace DFeSigner.Core.Exceptions | DFeSigner.NET",
    "summary": "Namespace DFeSigner.Core.Exceptions Classes DFeSignerException Exceção base para erros relacionados à assinatura de documentos fiscais eletrônicos. InvalidCertificateException Exceção para quando um certificado digital inválido ou sem chave privada é utilizado. InvalidXmlFormatException Exceção para quando o XML fornecido não possui o elemento raiz esperado para a assinatura digital. MissingReferenceIdException Exceção para quando o XML fornecido não contém o atributo 'Id' (referenceId) necessário para a assinatura digital no elemento raiz do documento fiscal eletrônico. MissingSignatureElementException Exceção para quando um XML não contém a tag Signature. MissingXmlElementException Exceção para quando um elemento XML crítico para a assinatura não é encontrado. UnexpectedDocumentTypeException Exceção para quando o XML é válido, mas não é do tipo de documento fiscal esperado (ex: NF-e passada para assinador de MDF-e)."
  },
  "api/DFeSigner.Core.Signers.CTeXmlSigner.html": {
    "href": "api/DFeSigner.Core.Signers.CTeXmlSigner.html",
    "title": "Class CTeXmlSigner | DFeSigner.NET",
    "summary": "Class CTeXmlSigner Namespace DFeSigner.Core.Signers Assembly DFeSigner.Core.dll Implementação concreta da assinatura digital para CT-e. public class CTeXmlSigner : DFeXmlSigner Inheritance object DFeXmlSigner CTeXmlSigner Inherited Members DFeXmlSigner.IdeTagElement DFeXmlSigner.ModTagElement DFeXmlSigner.Sign(string, X509Certificate2) DFeXmlSigner.IsSignatureValid(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetReferenceId(XmlDocument) Implementação específica para CT-e para identificar o elemento root 'infCte' a ser assinado. protected override string GetReferenceId(XmlDocument document) Parameters document XmlDocument O objeto XmlDocument contendo o XML da CT-e. Returns string Uma string contendo o atributo 'Id' do elemento root 'infCte'. Exceptions MissingXmlElementException Lançada se o elemento 'ide' não for encontrado. UnexpectedDocumentTypeException Lançada se o elemento 'mod' for diferente de 57(CT-e). InvalidXmlFormatException Lançada se o elemento root para a assinatura 'infCte' não for encontrado. MissingReferenceIdException Lançada se o atributo referenceId não for encontrado no elemento root 'infCte'."
  },
  "api/DFeSigner.Core.Signers.DFeXmlSigner.html": {
    "href": "api/DFeSigner.Core.Signers.DFeXmlSigner.html",
    "title": "Class DFeXmlSigner | DFeSigner.NET",
    "summary": "Class DFeXmlSigner Namespace DFeSigner.Core.Signers Assembly DFeSigner.Core.dll Classe abstrata base para a assinatura digital de Documentos Fiscais Eletrônicos (DF-e). Esta classe define o contrato para a assinatura e manipula as operações comuns de criptografia XML. public abstract class DFeXmlSigner Inheritance object DFeXmlSigner Derived CTeXmlSigner MDFeXmlSigner NFCeXmlSigner NFeXmlSigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IdeTagElement Tag padrão que representa o grupo de identificação do documento fiscal eletrônico. protected const string IdeTagElement = \"ide\" Field Value string ModTagElement Tag padrão que representa o modelo do documento fiscal eletrônico. protected const string ModTagElement = \"mod\" Field Value string Methods GetReferenceId(XmlDocument) Método abstrato que deve ser implementado pelas classes concretas para identificar o elemento XML a ser assinado e seu ID de referência. protected abstract string GetReferenceId(XmlDocument document) Parameters document XmlDocument O objeto XmlDocument contendo o XML a ser processado. Returns string Uma string contendo o atributo 'Id' do elemento root a ser assinado. IsSignatureValid(string) Verifica se um documento XML possui uma assinatura digital válida. Este método procura pelo elemento <Signature> no namespace XML Digital Signature e valida a integridade da assinatura. public bool IsSignatureValid(string xmlContent) Parameters xmlContent string O conteúdo do XML como uma string para ser validado. Returns bool true se a assinatura digital no XML for válida; caso contrário, false. Exceptions InvalidXmlFormatException Lançada quando o xmlContent é nulo ou vazio. MissingSignatureElementException Lançada quando o elemento 'Signature' não é encontrado no XML. Sign(string, X509Certificate2) Assina digitalmente um documento XML de DF-e usando um certificado digital. Este método é o ponto de entrada principal para a assinatura. public string Sign(string xmlContent, X509Certificate2 certificate) Parameters xmlContent string O conteúdo do XML a ser assinado. certificate X509Certificate2 O certificado digital X.509 a ser usado para a assinatura. Returns string O XML assinado como uma string, ou lança uma exceção em caso de erro. Exceptions InvalidXmlFormatException Lançada se o conteúdo XML for nulo ou vazio. InvalidCertificateException Lançada se o certificado for nulo ou não possuir uma chave privada acessível."
  },
  "api/DFeSigner.Core.Signers.MDFeXmlSigner.html": {
    "href": "api/DFeSigner.Core.Signers.MDFeXmlSigner.html",
    "title": "Class MDFeXmlSigner | DFeSigner.NET",
    "summary": "Class MDFeXmlSigner Namespace DFeSigner.Core.Signers Assembly DFeSigner.Core.dll Implementação concreta da assinatura digital para MDF-e. public class MDFeXmlSigner : DFeXmlSigner Inheritance object DFeXmlSigner MDFeXmlSigner Inherited Members DFeXmlSigner.IdeTagElement DFeXmlSigner.ModTagElement DFeXmlSigner.Sign(string, X509Certificate2) DFeXmlSigner.IsSignatureValid(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetReferenceId(XmlDocument) Implementação específica para MDF-e para identificar o elemento root 'infMDFe' a ser assinado. protected override string GetReferenceId(XmlDocument document) Parameters document XmlDocument O objeto XmlDocument contendo o XML da MDF-e. Returns string Uma string contendo o atributo 'Id' do elemento root 'infMDFe'. Exceptions MissingXmlElementException Lançada se o elemento 'ide' não for encontrado. UnexpectedDocumentTypeException Lançada se o elemento 'mod' for diferente de 58(MDF-e). InvalidXmlFormatException Lançada se o elemento root para a assinatura 'infMDFe' não for encontrado. MissingReferenceIdException Lançada se o atributo referenceId não for encontrado no elemento root 'infMDFe'."
  },
  "api/DFeSigner.Core.Signers.NFCeXmlSigner.html": {
    "href": "api/DFeSigner.Core.Signers.NFCeXmlSigner.html",
    "title": "Class NFCeXmlSigner | DFeSigner.NET",
    "summary": "Class NFCeXmlSigner Namespace DFeSigner.Core.Signers Assembly DFeSigner.Core.dll Implementação concreta da assinatura digital para NFC-e (Nota Fiscal de Consumidor Eletrônica). public class NFCeXmlSigner : DFeXmlSigner Inheritance object DFeXmlSigner NFCeXmlSigner Inherited Members DFeXmlSigner.IdeTagElement DFeXmlSigner.ModTagElement DFeXmlSigner.Sign(string, X509Certificate2) DFeXmlSigner.IsSignatureValid(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetReferenceId(XmlDocument) Implementação específica para NFC-e para identificar o elemento root 'infNFe' a ser assinado. Embora o nome do elemento seja 'infNFe' (o mesmo da NF-e), este método valida que o XML é de fato uma NFC-e através do atributo 'mod=\"65\"' no node 'ide'. protected override string GetReferenceId(XmlDocument document) Parameters document XmlDocument O objeto XmlDocument contendo o XML da NFC-e. Returns string Uma string contendo o atributo 'Id' do elemento root 'infNFe'. Exceptions MissingXmlElementException Lançada se o elemento 'ide' não for encontrado. UnexpectedDocumentTypeException Lançada se o elemento 'mod' for diferente de 65(NFC-e). InvalidXmlFormatException Lançada se o elemento root para a assinatura 'infNFe' não for encontrado. MissingReferenceIdException Lançada se o atributo referenceId não for encontrado no elemento root 'infNFe'."
  },
  "api/DFeSigner.Core.Signers.NFeXmlSigner.html": {
    "href": "api/DFeSigner.Core.Signers.NFeXmlSigner.html",
    "title": "Class NFeXmlSigner | DFeSigner.NET",
    "summary": "Class NFeXmlSigner Namespace DFeSigner.Core.Signers Assembly DFeSigner.Core.dll Implementação concreta da assinatura digital para NF-e. public class NFeXmlSigner : DFeXmlSigner Inheritance object DFeXmlSigner NFeXmlSigner Inherited Members DFeXmlSigner.IdeTagElement DFeXmlSigner.ModTagElement DFeXmlSigner.Sign(string, X509Certificate2) DFeXmlSigner.IsSignatureValid(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetReferenceId(XmlDocument) Implementação específica para NF-e para identificar o elemento root 'infNFe' a ser assinado. protected override string GetReferenceId(XmlDocument document) Parameters document XmlDocument O objeto XmlDocument contendo o XML da NF-e. Returns string Uma string contendo o atributo 'Id' do elemento root 'infNFe'. Exceptions MissingXmlElementException Lançada se o elemento 'ide' não for encontrado. UnexpectedDocumentTypeException Lançada se o elemento 'mod' for diferente de 55(NF-e). InvalidXmlFormatException Lançada se o elemento root para a assinatura 'infNFe' não for encontrado. MissingReferenceIdException Lançada se o atributo referenceId não for encontrado no elemento root 'infNFe'."
  },
  "api/DFeSigner.Core.Signers.html": {
    "href": "api/DFeSigner.Core.Signers.html",
    "title": "Namespace DFeSigner.Core.Signers | DFeSigner.NET",
    "summary": "Namespace DFeSigner.Core.Signers Classes CTeXmlSigner Implementação concreta da assinatura digital para CT-e. DFeXmlSigner Classe abstrata base para a assinatura digital de Documentos Fiscais Eletrônicos (DF-e). Esta classe define o contrato para a assinatura e manipula as operações comuns de criptografia XML. MDFeXmlSigner Implementação concreta da assinatura digital para MDF-e. NFCeXmlSigner Implementação concreta da assinatura digital para NFC-e (Nota Fiscal de Consumidor Eletrônica). NFeXmlSigner Implementação concreta da assinatura digital para NF-e."
  },
  "docs/certificado.html": {
    "href": "docs/certificado.html",
    "title": "| DFeSigner.NET",
    "summary": "Carregar o Certificado Digital Primeiro, carregue seu certificado digital X.509. Você pode usar um arquivo PFX (A1) ou um certificado instalado no repositório do Windows (A3). using System.Security.Cryptography.X509Certificates; using System.IO; public class CertificateLoader { public static X509Certificate2 LoadCertificate(string certificatePath, string certificatePassword) { // Para certificados PFX (A1) X509Certificate2 certificate = new X509Certificate2( certificatePath, certificatePassword, X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet ); Console.WriteLine(\"Certificado carregado com sucesso.\"); return certificate; } // Exemplo para carregar certificado A3 por nome do assunto (subject name) public static X509Certificate2 GetCertificateBySubjectName(string subjectName) { X509Store store = new X509Store(StoreLocation.CurrentUser); // Ou CurrentUser, LocalMachine try { store.Open(OpenFlags.ReadOnly); foreach (X509Certificate2 cert in store.Certificates) { if (cert.Subject.Contains(subjectName)) { if (cert.HasPrivateKey) { Console.WriteLine($\"Certificado '{subjectName}' encontrado e carregado.\"); return cert; } } } } finally { store.Close(); } throw new Exception($\"Certificado com assunto '{subjectName}' não encontrado ou sem chave privada.\"); } }"
  },
  "docs/cte.html": {
    "href": "docs/cte.html",
    "title": "| DFeSigner.NET",
    "summary": "Assinatura e Validação de CT-e (Conhecimento de Transporte Eletrônico) // --- Exemplo com CT-e --- public class CTeSignerExample { public static void Run(X509Certificate2 certificate, string xmlCTePath) { Console.WriteLine(\"--- Assinando CT-e ---\"); try { string xmlCTeContent = File.ReadAllText(xmlCTePath); CTeXmlSigner cteSigner = new CTeXmlSigner(); string signedCTeXml = cteSigner.Sign(xmlCTeContent, certificate); Console.WriteLine(\"CT-e assinada com sucesso!\"); File.WriteAllText(\"cte_assinada.xml\", signedCTeXml); Console.WriteLine(\"Validando assinatura do CT-e...\"); bool isCTeSignatureValid = cteSigner.IsSignatureValid(signedCTeXml); Console.WriteLine($\"Assinatura do CT-e é válida: {isCTeSignatureValid}\"); } catch (DFeSignerException dfeEx) { Console.WriteLine($\"Erro na assinatura/validação do CT-e: {dfeEx.Message}\"); } catch (Exception ex) { Console.WriteLine($\"Ocorreu um erro inesperado no CT-e: {ex.Message}\"); } } }"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "DFeSigner.NET | DFeSigner.NET",
    "summary": "DFeSigner.NET \uD83D\uDCD6 Sobre o Projeto DFeSigner.NET é uma biblioteca em C# (.NET) projetada para simplificar o processo de assinatura digital de Documentos Fiscais Eletrônicos (DF-e) no padrão brasileiro. Utilizando certificados digitais X.509 (A1 ou A3), a biblioteca oferece uma solução flexível e robusta para integrar a funcionalidade de assinatura em suas aplicações, com foco inicial em NF-e (Nota Fiscal Eletrônica), NFC-e (Nota Fiscal de Consumidor Eletrônica), CT-e (Conhecimento de Transporte Eletrônico) e MDF-e (Manifesto Eletrônico de Documentos Fiscais). O projeto adota uma arquitetura modular permitindo a fácil extensão para outros tipos de DF-e no futuro. Acompanha um projeto de testes unitários abrangente para garantir a confiabilidade e a validação das funcionalidades de assinatura. ✨ Funcionalidades Principais Assinatura de DF-e: Suporte robusto para assinatura digital de diversos tipos de Documentos Fiscais Eletrônicos. Validação de Assinatura Digital: Verificação da integridade e autenticidade de documentos XML assinados. Validação de Tipo de Documento: Garante que o assinador correto está sendo utilizado para cada modelo de DF-e (NF-e, NFC-e, CT-e, MDF-e). Tratamento de Erros Robusto: Exceções personalizadas para cenários comuns como XML inválido, certificado ausente ou incorreto, e estrutura XML inesperada. Testes Unitários Abrangentes: Projeto xUnit dedicado para garantir a confiabilidade e exemplificar o uso. Suporte a Certificados X.509: Compatibilidade com certificados PFX (A1) e certificados instalados no repositório do Windows (A3). \uD83D\uDE80 Tecnologias Utilizadas C# (.NET): Linguagem de programação e plataforma principal. XML (System.Xml): Para manipulação e leitura de documentos XML. Criptografia XML (System.Security.Cryptography.Xml): Componente do .NET para operações de assinatura XML digital. Certificados X.509 (System.Security.Cryptography.X509Certificates): Para gerenciamento e uso de certificados digitais. xUnit: Framework de testes unitários para .NET. \uD83D\uDEE0️ Instalação e Configuração Para configurar e executar o projeto, siga os passos abaixo: Clone o Repositório: git clone https://github.com/tiago-saldanha/DFeSigner.NET.git cd DFeSigner Abra no Visual Studio: Abra o arquivo de solução DFeSigner.sln no Visual Studio (2019 ou superior). Restaure as Dependências: O Visual Studio deve restaurar automaticamente os pacotes NuGet. Caso contrário, clique com o botão direito na solução e selecione Restore NuGet Packages. Construa a Solução: Clique em Build > Build Solution (ou Ctrl+Shift+B) para compilar os projetos DFeSigner.Core e DFeSigner.Tests. \uD83D\uDCA1 Como Usar: Assinatura e Validação de DF-e A biblioteca é projetada para ser fácil de usar. Você precisa de um conteúdo XML (string) e um certificado digital X.509. Primeiramente veja como configurar o seu Certificado Digital. Com seu certificado carregado, você pode prosseguir para assinar e validar os diversos tipos de Documentos Fiscais Eletrônicos. Clique no tipo de documento desejado para ver um exemplo de código completo e detalhes específicos: NF-e (Nota Fiscal Eletrônica) NFC-e (Nota Fiscal do Consumidor Eletrônica) CT-e (Conhecimento de Transporte Eletrônico) MDF-e (Manifesto de Documentos Fiscais Eletrônica) Você também pode ver a nossa seção sobre tratamento de erros."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "DFeSigner.NET | DFeSigner.NET",
    "summary": "DFeSigner.NET Simplificando a Assinatura Digital de Documentos Fiscais Eletrônicos Bem-vindo(a) à documentação oficial do DFeSigner.NET! Este projeto é uma biblioteca robusta e flexível em C# (.NET) desenvolvida para desmistificar e otimizar o processo de assinatura digital de Documentos Fiscais Eletrônicos (DF-e) no padrão brasileiro. Se você trabalha com NF-e, NFC-e, CT-e, ou MDF-e e precisa de uma solução confiável para integrar a funcionalidade de assinatura digital em suas aplicações, você está no lugar certo. Por que DFeSigner.NET? No complexo ecossistema fiscal brasileiro, a assinatura digital é um componente crítico para garantir a validade jurídica e a integridade dos DF-e. O DFeSigner.NET surge como uma ferramenta essencial para desenvolvedores, oferecendo: Simplicidade e Eficiência: Reduza a complexidade da assinatura de DF-e com uma API clara e fácil de usar. Compatibilidade Abrangente: Suporte nativo para NF-e, NFC-e, CT-e e MDF-e, com uma arquitetura extensível para futuros tipos de documentos. Segurança e Confiabilidade: Utilize certificados digitais X.509 (A1 e A3) para garantir a autenticidade e a não-repúdio das assinaturas. Validação Integrada: Verifique a validade de assinaturas digitais existentes e o tipo de documento, garantindo a conformidade. Tratamento de Erros Robusto: Receba feedback claro através de exceções personalizadas para identificar e resolver problemas rapidamente. O que você encontrará aqui? Nesta documentação, você terá acesso a: Um guia detalhado de instalação e configuração do DFeSigner.NET em seus projetos. Exemplos de código práticos para assinatura e validação de diferentes tipos de DF-e. Informações sobre as funcionalidades e os recursos que a biblioteca oferece. Detalhes sobre as tecnologias utilizadas e como elas contribuem para a solução. Comece a explorar a documentação para descobrir como o DFeSigner.NET pode simplificar suas operações com documentos fiscais eletrônicos!"
  },
  "docs/license.html": {
    "href": "docs/license.html",
    "title": "| DFeSigner.NET",
    "summary": "\uD83D\uDEE1️ Licença e Atribuição Este projeto está licenciado sob a Licença MIT. De acordo com os termos da licença, qualquer redistribuição ou uso do código deve incluir o seguinte aviso de copyright: © 2025 Tiago Ávila Saldanha \uD83D\uDCE2 Atribuição adicional Além disso, solicita-se que qualquer uso público, fork ou redistribuição com alterações visíveis contenha uma citação clara ao autor original: Tiago Ávila Saldanha ⭐ Apoie o Projeto Se este projeto foi útil para você, considere nos dar uma estrela no GitHub! Seu apoio nos ajuda a continuar desenvolvendo e melhorando. Deixe sua estrela em DFeSigner.NET!"
  },
  "docs/mdfe.html": {
    "href": "docs/mdfe.html",
    "title": "| DFeSigner.NET",
    "summary": "Assinatura e Validação de MDF-e (Manifesto Eletrônico de Documentos Fiscais) // --- Exemplo com MDF-e --- public class MDFeSignerExample { public static void Run(X509Certificate2 certificate, string xmlMDFePath) { Console.WriteLine(\"--- Assinando MDF-e ---\"); try { string xmlMDFeContent = File.ReadAllText(xmlMDFePath); MDFeXmlSigner mdfeSigner = new MDFeXmlSigner(); string signedMDFeXml = mdfeSigner.Sign(xmlMDFeContent, certificate); Console.WriteLine(\"MDF-e assinada com sucesso!\"); File.WriteAllText(\"mdfe_assinada.xml\", signedMDFeXml); Console.WriteLine(\"Validando assinatura do MDF-e...\"); bool isMDFeSignatureValid = mdfeSigner.IsSignatureValid(signedMDFeXml); Console.WriteLine($\"Assinatura do MDF-e é válida: {isMDFeSignatureValid}\"); } catch (DFeSignerException dfeEx) { Console.WriteLine($\"Erro na assinatura/validação do MDF-e: {dfeEx.Message}\"); } catch (Exception ex) { Console.WriteLine($\"Ocorreu um erro inesperado no MDF-e: {ex.Message}\"); } } }"
  },
  "docs/nfce.html": {
    "href": "docs/nfce.html",
    "title": "| DFeSigner.NET",
    "summary": "Assinatura e Validação de NFC-e (Nota Fiscal de Consumidor Eletrônica) // --- Exemplo com NFC-e --- public class NFCeSignerExample { public static void Run(X509Certificate2 certificate, string xmlNFCePath) { Console.WriteLine(\"--- Assinando NFC-e ---\"); try { string xmlNFCeContent = File.ReadAllText(xmlNFCePath); NFCeXmlSigner nfceSigner = new NFCeXmlSigner(); string signedNFCeXml = nfceSigner.Sign(xmlNFCeContent, certificate); Console.WriteLine(\"NFC-e assinada com sucesso!\"); File.WriteAllText(\"nfce_assinada.xml\", signedNFCeXml); Console.WriteLine(\"Validando assinatura da NFC-e...\"); bool isNFCeSignatureValid = nfceSigner.IsSignatureValid(signedNFCeXml); Console.WriteLine($\"Assinatura da NFC-e é válida: {isNFCeSignatureValid}\"); } catch (DFeSignerException dfeEx) { Console.WriteLine($\"Erro na assinatura/validação da NFC-e: {dfeEx.Message}\"); } catch (Exception ex) { Console.WriteLine($\"Ocorreu um erro inesperado na NFC-e: {ex.Message}\"); } } }"
  },
  "docs/nfe.html": {
    "href": "docs/nfe.html",
    "title": "| DFeSigner.NET",
    "summary": "Assinatura e Validação de NF-e (Nota Fiscal Eletrônica) using DFeSigner.Core.Signers; using DFeSigner.Core.Exceptions; using System; using System.IO; using System.Security.Cryptography.X509Certificates; // --- Exemplo com NF-e --- public class NFeSignerExample { public static void Run(X509Certificate2 certificate, string xmlNFePath) { Console.WriteLine(\"--- Assinando NF-e ---\"); try { string xmlNFeContent = File.ReadAllText(xmlNFePath); NFeXmlSigner nfeSigner = new NFeXmlSigner(); string signedNFeXml = nfeSigner.Sign(xmlNFeContent, certificate); Console.WriteLine(\"NF-e assinada com sucesso!\"); File.WriteAllText(\"nfe_assinada.xml\", signedNFeXml); Console.WriteLine(\"Validando assinatura da NF-e...\"); bool isNFeSignatureValid = nfeSigner.IsSignatureValid(signedNFeXml); Console.WriteLine($\"Assinatura da NF-e é válida: {isNFeSignatureValid}\"); } catch (DFeSignerException dfeEx) { Console.WriteLine($\"Erro na assinatura/validação da NF-e: {dfeEx.Message}\"); } catch (Exception ex) { Console.WriteLine($\"Ocorreu um erro inesperado na NF-e: {ex.Message}\"); } } }"
  },
  "docs/tratamento-de-erros.html": {
    "href": "docs/tratamento-de-erros.html",
    "title": "| DFeSigner.NET",
    "summary": "Tratamento de Erros A biblioteca implementa um tratamento de erros robusto, lançando exceções personalizadas para diferentes cenários. É recomendável capturar a DFeSignerException e suas subclasses para um controle mais granular. // Exemplo de uso em um método Main para demonstrar a estrutura completa com tratamento de erros public class ExemploAssinaturaCompleto { public static void Main(string[] args) { // Caminhos de exemplo (ajuste para seus arquivos reais) string xmlNFePath = \"caminho/para/sua/nfe.xml\"; string xmlNFCePath = \"caminho/para/sua/nfce.xml\"; string xmlCTePath = \"caminho/para/sua/cte.xml\"; string xmlMDFePath = \"caminho/para/sua/mdfe.xml\"; string certificatePath = \"caminho/para/seu/certificado.pfx\"; string certificatePassword = \"sua_senha_do_certificado\"; X509Certificate2 certificate = null; try { certificate = CertificateLoader.LoadCertificate(certificatePath, certificatePassword); NFeSignerExample.Run(certificate, xmlNFePath); NFCeSignerExample.Run(certificate, xmlNFCePath); CTeSignerExample.Run(certificate, xmlCTePath); MDFeSignerExample.Run(certificate, xmlMDFePath); } catch (DFeSignerException dfeEx) { Console.WriteLine($\"Erro na assinatura/validação do DF-e: {dfeEx.Message}\"); if (dfeEx.InnerException != null) { Console.WriteLine($\"Detalhes internos: {dfeEx.InnerException.Message}\"); } if (dfeEx is InvalidCertificateException) { Console.WriteLine(\"Verifique o certificado digital (caminho, senha ou chave privada).\"); } else if (dfeEx is InvalidXmlFormatException xmlFormatEx) { Console.WriteLine($\"O XML não está formatado corretamente. Tag raiz esperada: {xmlFormatEx.ExpectedRootTag}\"); } else if (dfeEx is MissingReferenceIdException missingIdEx) { Console.WriteLine($\"O XML não possui o referenceId necessário no elemento '{missingIdEx.ElementName}'.\"); } else if (dfeEx is MissingSignatureElementException) { Console.WriteLine(\"O XML não contém o elemento de assinatura digital (<Signature>).\"); } else if (dfeEx is UnexpectedDocumentTypeException unexpectedTypeEx) { Console.WriteLine($\"Tipo de documento inesperado. Esperado: {unexpectedTypeEx.ExpectedModel}, Encontrado: {unexpectedTypeEx.FoundModel}\"); } } catch (Exception ex) { Console.WriteLine($\"Ocorreu um erro inesperado: {ex.Message}\"); Console.WriteLine(ex.ToString()); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "DFeSigner.NET | DFeSigner.NET",
    "summary": "DFeSigner.NET Sua Solução Definitiva para Assinatura Digital de Documentos Fiscais Eletrônicos Bem-vindo ao DFeSigner.NET, a biblioteca essencial para desenvolvedores que buscam simplificar e otimizar a assinatura digital de DF-e no Brasil. Com DFeSigner.NET, você garante a integridade e validade de seus documentos fiscais eletrônicos com rapidez e segurança, utilizando certificados X.509 (A1/A3). Explore a documentação para descobrir como desburocratizar a assinatura de NF-e, NFC-e, CT-e, MDF-e e muito mais! Comece Agora mesmo! (Ou navegue pela documentação usando o menu lateral.)"
  }
}